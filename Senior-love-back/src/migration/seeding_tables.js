import { sequelize } from '../models/sequelize.js';
import { Activity, User, Event, Category, Localisation, Conversation } from '../models/association.js';
import argon2 from "argon2"; // Import d'argon2
import { RefreshToken } from '../models/RefreshToken.js';

const initialInterets = {
  "Loisirs": {
    "Atelier tricot": false,
    "Peinture sur soie": false,
    "Scrapbooking": false,
    "Lecture": false,
    "Peinture": false,
    "Cr√©ation bijoux": false,
    "Photographie": false,
    "Poterie": false,
    "Cuisine": false
  },
  "Culture": {
    "Visite de mus√©e": false,
    "Conf√©rence historique": false,
    "Projection de film ancien": false,
    "Cin√©ma": false,
    "Th√©√¢tre": false
  },
  "Sport": {
    "Gym douce": false,
    "Aquagym": false,
    "Randonn√©e": false,
    "Marche rapide": false,
    "Danse": false,
    "V√©lo": false
  },
  "Bien-√™tre": {
    "S√©ance de relaxation": false,
    "Massage assis": false,
    "Yoga": false,
    "Pilate": false,
    "Sophrologie": false,
    "Cures thermales": false
  },
  "Style de vie": {
    "Voyage": false,
    "Proche de ma famille": false,
    "Vie simple": false,
    "A la recherche de l'amour": false,
    "Sorties entre amis": false,
    "B√©n√©volat": false,
    "Curieux": false
  },
  "Jeux": {
    "Tournoi de belote": false,
    "Scrabble": false,
    "Bingo": false,
    "Bridge": false,
    "Mots crois√©s": false,
    "Sudoku": false,
    "Puzzles": false
  },
  "Musique": {
    "Chorale": false,
    "Classique": false,
    "Jazz": false,
    "Rock": false
  },
  "Nature": {
    "Balade au parc": false,
    "Jardinage": false,
    "Visite de parcs naturels": false,
    "Amoureux des animaux": false
  }
};

await RefreshToken.sync();
console.log("üîÑ SeniorLoveBase seeding started...");

// Fonction utilitaire pour hasher un mot de passe avec argon2
const hashPassword = async (password) => await argon2.hash(password);

// biome-ignore lint/style/useConst: <explanation>
let jeanActivity = initialInterets;
jeanActivity["Loisirs"]["Lecture"] = true;
jeanActivity["Loisirs"]["Peinture"] = true;
jeanActivity["Loisirs"]["Cr√©ation bijoux"] = true;

await User.bulkCreate([
    {
        pseudo: "jean55",
        email: "jean55@example.com",
        firstname: "Jean",
        lastname: "Lemoine",
        password: await hashPassword("jeanpass"),
        birth_date: "1965-02-15",
        gender: "homme",
        profile_picture: "/avatar/papi-nature.jpg",
        description: "J'aime la nature, les balades √† v√©lo et les bons repas.",
        role: "user",
        interest: jeanActivity
      },
      {
        pseudo: "marie62",
        email: "marie62@example.com",
        firstname: "Marie",
        lastname: "Dupont",
        password: await hashPassword("mariepass"),
        birth_date: "1958-07-21",
        gender: "femme",
        profile_picture: "/avatar/mamie_joie.jpg",
        description: "Amoureuse de la lecture, du jardinage et des chats üê±.",
        role: "user",
        interest: initialInterets
      },
      {
        pseudo: "paul77",
        email: "paul77@example.com",
        firstname: "Paul",
        lastname: "Giraud",
        password: await hashPassword("paulpass"),
        birth_date: "1948-03-10",
        gender: "homme",
        profile_picture: "/avatar/pepe-canne.jpg",
        description: "Retrait√© actif, je cherche une compagne pour partager des voyages et des moments conviviaux.",
        role: "user",
        interest: initialInterets
      },
      {
        pseudo: "claudine60",
        email: "claudine60@example.com",
        firstname: "Claudine",
        lastname: "Rousseau",
        password: await hashPassword("claudinepass"),
        birth_date: "1960-11-05",
        gender: "femme",
        profile_picture: "/avatar/mamie-gourmande.jpg",
        description: "Passionn√©e de peinture et de cuisine, je cherche quelqu'un pour discuter et partager.",
        role: "user",
        interest: initialInterets
      },
      {
        pseudo: "jeanluc64",
        email: "jeanluc64@example.com",
        firstname: "Jean-Luc",
        lastname: "Berger",
        password: await hashPassword("jeanlucpass"),
        birth_date: "1957-09-22",
        gender: "homme",
        profile_picture: "/avatar/al-capone.jpg",
        description: "Un amoureux des grands espaces et de la randonn√©e. Je cherche une partenaire pour profiter de la vie.",
        role: "user",
        interest: initialInterets
      },
      {
        pseudo: "monique68",
        email: "monique68@example.com",
        firstname: "Monique",
        lastname: "Fournier",
        password: await hashPassword("moniquepass"),
        birth_date: "1955-05-11",
        gender: "femme",
        profile_picture: "/avatar/mamie-hippy.jpg",
        description: "Veuve depuis quelques ann√©es, je cherche √† rencontrer quelqu'un pour partager des moments de joie.",
        role: "user",
        interest: initialInterets
      },
      {
        pseudo: "georges71",
        email: "georges71@example.com",
        firstname: "Georges",
        lastname: "Lemoine",
        password: await hashPassword("georgespass"),
        birth_date: "1953-01-30",
        gender: "homme",
        profile_picture: "/avatar/papi-fatigue.jpg",
        description: "Ancien ing√©nieur, je suis passionn√© de musique classique et de voyages.",
        role: "user",
        interest: initialInterets
      },
      {
        pseudo: "bernadette66",
        email: "bernadette66@example.com",
        firstname: "Bernadette",
        lastname: "Martin",
        password: await hashPassword("bernadettepass"),
        birth_date: "1964-08-18",
        gender: "femme",
        profile_picture: "/avatar/mamie-velo.jpg",
        description: "J'aime la photographie, la danse et passer du temps avec mes amis.",
        role: "user",
        interest: initialInterets
      },
      {
        pseudo: "alain69",
        email: "alain69@example.com",
        firstname: "Alain",
        lastname: "Richard",
        password: await hashPassword("alainpass"),
        birth_date: "1952-10-25",
        gender: "homme",
        profile_picture: "/avatar/papi-80.jpg",
        description: "Amateur de bonne cuisine et de films anciens, je cherche une personne simple et joyeuse.",
        role: "user",
        interest: initialInterets
      },
      {
        pseudo: "pierrette59",
        email: "pierrette59@example.com",
        firstname: "Pierrette",
        lastname: "Lefevre",
        password: await hashPassword("pierrettepass"),
        birth_date: "1966-06-12",
        gender: "femme",
        profile_picture: "/avatar/mamie-canne.jpg",
        description: "J'adore les promenades en bord de mer et la lecture de romans d'amour.",
        role: "user",
        interest: initialInterets
      },
      {
        pseudo: "marineAdmin",
        email: "marine.admin@example.com",
        firstname: "Marine",
        lastname: "Ligny",
        password: await hashPassword("marineAdmin"),
        birth_date: "1990-09-13",
        gender: "femme",
        profile_picture: "",
        description: "Je suis ton pire ennemi, ici l'attaque des Tyrans !",
        role: "admin",
        interest: initialInterets
      }
    ]);
    console.log("‚úÖ 10 utilisateurs s√©nior ins√©r√©s avec succ√®s");
    
// ici on ins√®re les cat√©gories
await Category.bulkCreate([
        { name: "Loisirs" },
        { name: "Culture" },
        { name: "Sport" },
        { name: "Bien-√™tre" },
        { name: "Style de vie" },
        { name: "Jeux" },
        { name: "Musique" },
        { name: "Nature" }
      ], { returning: true });
      console.log("‚úÖ 10 cat√©gories ins√©r√©s avec succ√®s");

// ici on ins√®re les activit√©s
await Activity.bulkCreate([
        { name: "Atelier tricot" },
        { name: "Peinture sur soie" },
        { name: "Scrapbooking" },
        { name: "Lecture" },
        { name: "Peinture" },
        { name: "Cr√©ation bijoux" },
        { name: "Photographie" },
        { name: "Poterie" },
        { name: "Cuisine" },
        { name: "Visite de mus√©e" },
        { name: "Conf√©rence historique" },
        { name: "Projection de film ancien" },
        { name: "Cin√©ma" },
        { name: "Th√©√¢tre" },
        { name: "Gym douce" },
        { name: "Aquagym" },
        { name: "Randonn√©e" },
        { name: "Marche rapide" },
        { name: "Danse" },
        { name: "V√©lo" },
        { name: "S√©ance de relaxation" },
        { name: "Massage assis" },
        { name: "Yoga" },
        { name: "Pilate" },
        { name: "Sophrologie" },
        { name: "Cures thermales" },
        { name: "Voyage" },
        { name: "Proche de ma famille" },
        { name: "Vie simple" },
        { name: "A la recherche de l'amour" },
        { name: "Sorties entre amis" },
        { name: "B√©n√©volat" },
        { name: "Curieux" },
        { name: "Tournoi de belote" },
        { name: "Scrabble" },
        { name: "Bingo" },
        { name: "Bridge" },
        { name: "Mots crois√©s" },
        { name: "Sudoku" },
        { name: "Puzzles" },
        { name: "Chorale" },
        { name: "Classique" },
        { name: "Jazz" },
        { name: "Rock" },
        { name: "Balade au parc" },
        { name: "Jardinage" },
        { name: "Visite de parcs naturels" },
        { name: "Amoureux des animaux" },
      ]);
      console.log("‚úÖ Activit√©s ins√©r√©es avec succ√®s");

//fonction pour param√©trer la creation des activit√©s et leur lien avec une cat√©gorie
async function addActivityToCategory(activityName, categoryName) {
    const activity = await Activity.findOne({ where: { name: activityName } });
    const category = await Category.findOne({ where: { name: categoryName } });
  
    if (!activity || !category) {
      throw new Error("Activity or Category not found");
    }
  
    // Associer l'activit√© √† la cat√©gorie
    activity.category_id = category.id; // Met √† jour la cl√© √©trang√®re category_id
    await activity.save(); // Sauvegarde l'activit√© avec la nouvelle cat√©gorie
  }
  
    // Ajout d'activit√©s aux cat√©gories
    await addActivityToCategory("Atelier tricot", "Loisirs");
    await addActivityToCategory("Peinture sur soie", "Loisirs");
    await addActivityToCategory("Scrapbooking", "Loisirs");
    await addActivityToCategory("Lecture", "Loisirs");
    await addActivityToCategory("Peinture", "Loisirs");
    await addActivityToCategory("Cr√©ation bijoux", "Loisirs");
    await addActivityToCategory("Photographie", "Loisirs");
    await addActivityToCategory("Poterie", "Loisirs");
    await addActivityToCategory("Cuisine", "Loisirs");

    await addActivityToCategory("Visite de mus√©e", "Culture");
    await addActivityToCategory("Conf√©rence historique", "Culture");
    await addActivityToCategory("Projection de film ancien", "Culture");
    await addActivityToCategory("Cin√©ma", "Culture");
    await addActivityToCategory("Th√©√¢tre", "Culture");

    await addActivityToCategory("Gym douce", "Sport");
    await addActivityToCategory("Aquagym", "Sport");
    await addActivityToCategory("Randonn√©e", "Sport");
    await addActivityToCategory("Marche rapide", "Sport");
    await addActivityToCategory("Danse", "Sport");
    await addActivityToCategory("V√©lo", "Sport");

    await addActivityToCategory("S√©ance de relaxation", "Bien-√™tre");
    await addActivityToCategory("Massage assis", "Bien-√™tre");
    await addActivityToCategory("Yoga", "Bien-√™tre");
    await addActivityToCategory("Pilate", "Bien-√™tre");
    await addActivityToCategory("Sophrologie", "Bien-√™tre");
    await addActivityToCategory("Cures thermales", "Bien-√™tre");

    await addActivityToCategory("Voyage", "Style de vie");
    await addActivityToCategory("Proche de ma famille", "Style de vie");
    await addActivityToCategory("Vie simple", "Style de vie");
    await addActivityToCategory("A la recherche de l'amour", "Style de vie");
    await addActivityToCategory("Sorties entre amis", "Style de vie");
    await addActivityToCategory("B√©n√©volat", "Style de vie");
    await addActivityToCategory("Curieux", "Style de vie");

    await addActivityToCategory("Tournoi de belote", "Jeux");
    await addActivityToCategory("Scrabble", "Jeux");
    await addActivityToCategory("Bingo", "Jeux");
    await addActivityToCategory("Bridge", "Jeux");
    await addActivityToCategory("Mots crois√©s", "Jeux");
    await addActivityToCategory("Sudoku", "Jeux");
    await addActivityToCategory("Puzzles", "Jeux");

    await addActivityToCategory("Chorale", "Musique");
    await addActivityToCategory("Classique", "Musique");
    await addActivityToCategory("Jazz", "Musique");
    await addActivityToCategory("Rock", "Musique");

    await addActivityToCategory("Balade au parc", "Nature");
    await addActivityToCategory("Jardinage", "Nature");
    await addActivityToCategory("Visite de parcs naturels", "Nature");
    await addActivityToCategory("Amoureux des animaux", "Nature");

    console.log("‚úÖ Activit√©s ins√©r√©es avec succ√®s");

// Cr√©ation des √©v√©nements fictifs 
const events = [
    {
        name: "Caf√© Rencontre et Discussions",
        date: "2025-05-05", 
        description: "Rencontre conviviale autour d'un caf√© pour discuter de vos passions et de vos exp√©riences de vie.",
        picture: "https://images.pexels.com/photos/8790891/pexels-photo-8790891.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2"
    },
    {
        name: "Soir√©e dansante r√©tro",
        date: "2025-06-01", 
        description: "Une soir√©e dansante avec des musiques des ann√©es 60 et 70. Viens bouger et retrouver tes souvenirs !",
        picture: "https://images.pexels.com/photos/6173849/pexels-photo-6173849.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2"
    },
    {
        name: "Randonn√©e douce en for√™t",
        date: "2025-05-15", 
        description: "Promenade tranquille en for√™t pour profiter du plein air et √©changer avec de nouveaux amis.",
        availability: 25,
        picture: "https://images.pexels.com/photos/31798073/pexels-photo-31798073/free-photo-of-vue-panoramique-sur-les-montagnes-des-pyrenees-francaises.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2"
    },
    {
        name: "Atelier Cuisine et Partage",
        date: "2025-07-10", 
        description: "Pr√©parez des recettes simples et savoureuses √† partager, tout en rencontrant d'autres passionn√©s de cuisine.",
        availability: 16,
        picture: "https://images.pexels.com/photos/1655329/pexels-photo-1655329.jpeg?auto=compress&cs=tinysrgb&w=600"
    },
    {
        name: "Soir√©e cin√©ma et discussion",
        date: "2025-08-20", 
        description: "Projection d'un film classique suivi d'une discussion autour du cin√©ma. Un moment culturel et chaleureux.",
        availability: 10,
        picture: "https://images.pexels.com/photos/2774556/pexels-photo-2774556.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2"
    }
    
];
    // Ins√©rer les √©v√©nements dans la base de donn√©es
    await Event.bulkCreate(events);
    console.log("‚úÖ 5 √©v√©nements cr√©√©s avec succ√®s");


// Fonction pour ajouter une activit√© √† un √©v√©nement
async function addActivityToEvent(eventName, activityName) {
    const event = await Event.findOne({ where: { name: eventName } });
    const activity = await Activity.findOne({ where: { name: activityName } });

    if (!event || !activity) {
        throw new Error("Event or Activity not found");
    }

    await event.addActivity(activity); // Associe l'activit√© √† l'√©v√©nement
}

    // Association d'√©v√®nements aux activit√©s 
    await addActivityToEvent("Caf√© Rencontre et Discussions", "Lecture");
    await addActivityToEvent("Soir√©e dansante r√©tro", "Danse");
    await addActivityToEvent("Randonn√©e douce en for√™t", "Marche rapide");
    await addActivityToEvent("Randonn√©e douce en for√™t", "Randonn√©e");
    await addActivityToEvent("Soir√©e cin√©ma et discussion", "Cin√©ma");
    await addActivityToEvent("Soir√©e cin√©ma et discussion", "Sorties entre amis");
    await addActivityToEvent("Atelier Cuisine et Partage", "Cuisine");


    console.log("‚úÖ Activit√©s ajout√©es aux √©v√©nements");

// Fonction pour ajouter un user √† un √©v√©nement
async function addUserToEvent(userPseudo, eventName) {
    const event = await Event.findOne({ where: { name: eventName } });
    const user = await User.findOne({ where: { pseudo: userPseudo } });

    if (!event || !user) {
        throw new Error("Event or User not found");
    }

    await event.addUser(user); // Associe l'utilisateur √† l'√©v√©nement
}

// Association d'utilisateurs aux √©v√®nements

await addUserToEvent("pierrette59", "Caf√© Rencontre et Discussions");
await addUserToEvent("bernadette66", "Soir√©e dansante r√©tro");
await addUserToEvent("jeanluc64", "Randonn√©e douce en for√™t");
await addUserToEvent("alain69", "Atelier Cuisine et Partage");
await addUserToEvent("claudine60", "Atelier Cuisine et Partage");

    console.log("‚úÖ Utilisateurs ajout√©s aux √©v√©nements");

// Fonction pour ajouter un utilisateur √† une activit√©
async function addActivityToUser(userPseudo, activityName) {
    const activity = await Activity.findOne({ where: { name: activityName }});
    const user = await User.findOne({ where: { pseudo: userPseudo } });

    if (!activity || !user) {
        throw new Error("Activity or User not found");
    }

    await activity.addUser(user); // Associe l'utilisateur √† une activit√©
}

// Association d'utilisateurs aux activit√©s
// await addActivityToUser("jean55", "V√©lo");
// await addActivityToUser("jean55", "Sorties entre amis");
// await addActivityToUser("jean55", "Balade au parc");

// await addActivityToUser("marie62", "Lecture");
// await addActivityToUser("marie62", "Jardinage");
// await addActivityToUser("marie62", "Amoureux des animaux");

// await addActivityToUser("paul77", "A la recherche de l'amour");
// await addActivityToUser("paul77", "Voyage");
// await addActivityToUser("paul77", "Tournoi de belote");

// await addActivityToUser("claudine60", "Peinture");
// await addActivityToUser("claudine60", "Cuisine");
// await addActivityToUser("claudine60", "Classique");

// await addActivityToUser("jeanluc64", "Randonn√©e");
// await addActivityToUser("jeanluc64", "Visite de parcs naturels");
// await addActivityToUser("jeanluc64", "A la recherche de l'amour");

// await addActivityToUser("monique68", "A la recherche de l'amour");
// await addActivityToUser("monique68", "Cures thermales");
// await addActivityToUser("monique68", "Peinture sur soie");

// await addActivityToUser("georges71", "Classique");
// await addActivityToUser("georges71", "Voyage");
// await addActivityToUser("georges71", "Projection de film ancien");

// await addActivityToUser("bernadette66", "Sorties entre amis");
// await addActivityToUser("bernadette66", "Danse");
// await addActivityToUser("bernadette66", "Photographie");

// await addActivityToUser("pierrette59", "Lecture");
// await addActivityToUser("pierrette59", "Visite de parcs naturels");
// await addActivityToUser("pierrette59", "Cin√©ma");

// await addActivityToUser("alain69", "Cuisine");
// await addActivityToUser("alain69", "Projection de film ancien");
// await addActivityToUser("alain69", "Jazz");

    console.log("‚úÖ Activit√©s ajout√©es aux utilisateurs");

// Fonction pour ajouter une localisation √† un utilisateur avec un d√©partement
async function addLocalisationToUser(userPseudo, localisationName, department) {
  // V√©rifier si la localisation avec le d√©partement existe d√©j√†
  let localisation = await Localisation.findOne({ 
      where: { 
          city: localisationName, 
          department: department 
      }
  });

  // Si la localisation n'existe pas, cr√©er une nouvelle localisation
  if (!localisation) {
      localisation = await Localisation.create({ 
          city: localisationName, 
          department: department 
      });
  }

  // R√©cup√©rer l'utilisateur
  const user = await User.findOne({ where: { pseudo: userPseudo } });

  // V√©rifier si l'utilisateur existe
  if (!user) {
      throw new Error("User not found");
  }

  // Associer l'utilisateur √† la localisation
  await user.setLocalisation(localisation);
}

// Exemple d'appel pour associer des utilisateurs aux localisations avec d√©partement
await addLocalisationToUser("jean55", "Bar-le-Duc", "Meuse");
await addLocalisationToUser("marie62", "Calais", "Pas-de-Calais");
await addLocalisationToUser("paul77", "Melun", "Seine-et-Marne");
await addLocalisationToUser("claudine60", "Beauvais", "Oise");
await addLocalisationToUser("jeanluc64", "Pau", "Pyr√©n√©es-Atlantiques");
await addLocalisationToUser("monique68", "Colmar", "Haut-Rhin");
await addLocalisationToUser("georges71", "M√¢con", "Sa√¥ne-et-Loire");
await addLocalisationToUser("bernadette66", "Perpignan", "Pyr√©n√©es-Orientales");
await addLocalisationToUser("pierrette59", "Lille", "Nord");
await addLocalisationToUser("alain69", "Lyon", "Rh√¥ne");


// Fonction pour ajouter un √©v√©nement √† une localisation avec un d√©partement
async function addLocalisationToEvent(eventName, localisationCity, department) {
  // V√©rifier si la localisation avec la ville et le d√©partement existe
  let localisation = await Localisation.findOne({
      where: {
          city: localisationCity,
          department: department
      }
  });

  // Si la localisation n'existe pas, cr√©er une nouvelle localisation
  if (!localisation) {
      localisation = await Localisation.create({
          city: localisationCity,
          department: department
      });
  }

  // R√©cup√©rer l'√©v√©nement
  const event = await Event.findOne({ where: { name: eventName } });

  // V√©rifier si l'√©v√©nement existe
  if (!event) {
      throw new Error("Event not found");
  }

  // Associer l'√©v√©nement √† la localisation
  await event.setLocalisation(localisation);
}

// Exemple d'appel pour associer des √©v√©nements aux localisations avec d√©partement
await addLocalisationToEvent("Caf√© Rencontre et Discussions", "Lille", "Nord");
await addLocalisationToEvent("Soir√©e dansante r√©tro", "Perpignan", "Pyr√©n√©es-Orientales");
await addLocalisationToEvent("Randonn√©e douce en for√™t", "Pau", "Pyr√©n√©es-Atlantiques");
await addLocalisationToEvent("Atelier Cuisine et Partage", "Lyon", "Rh√¥ne");
await addLocalisationToEvent("Soir√©e cin√©ma et discussion", "Colmar", "Haut-Rhin");



// Cr√©ation des conversations fictives
async function createConversation(senderId, receiverId, content) {
    const sender = await User.findOne({ where: { pseudo: senderId } });
    const receiver = await User.findOne({ where: { pseudo: receiverId } });

    if (!sender || !receiver) {
        throw new Error(`Les utilisateurs ${senderId} ou ${receiverId} n'ont pas √©t√© trouv√©s`);
    }

    // V√©rifie si une conversation entre les deux utilisateurs existe d√©j√†
    let conversation = await Conversation.findOne({
      where: {
          sender_id: sender.id,
          receiver_id: receiver.id
      }
    });

    const newMessage = `[${new Date().toISOString()}] ${senderId}: ${content}\n`;

      // Si la conversation existe, ajoute un nouveau message √† la conversation
      if (conversation) {
        // Ajoute le nouveau message √† la suite du contenu existant
        conversation.content += newMessage;
        await conversation.save();

        console.log(`‚úÖ Nouveau message ajout√© √† la conversation entre ${senderId} et ${receiverId}`);

        
      } else {
      // Cr√©e la conversation entre user1 et user2
      conversation = await Conversation.create({
        sender_id: sender.id, 
        receiver_id: receiver.id, 
        content: newMessage
      }); 
    
    console.log(`‚úÖ Conversation cr√©√©e entre ${senderId} et ${receiverId}`);
  }
}

// Ajouter des conversations entre certains utilisateurs
// Conversations suppl√©mentaires simul√©es
await createConversation("jean55", "marie62", "Salut Marie, comment vas-tu ?");
await createConversation("marie62", "jean55", "Tr√®s bien merci Jean ! Et toi ?");
await createConversation("jean55", "marie62", "Super ! Tu veux qu‚Äôon se voie cette semaine ?");

await createConversation("paul77", "claudine60", "Bonjour Claudine, tu fais quoi ce week-end ?");
await createConversation("claudine60", "paul77", "Bonjour Paul ! Je pense √† faire un peu de jardinage, et toi ?");
await createConversation("paul77", "claudine60", "Je vais faire une petite randonn√©e, peut-√™tre que tu aimerais m‚Äôaccompagner ?");
await createConversation("claudine60", "paul77", "√áa me tente bien ! Je pourrais te rejoindre samedi apr√®s-midi.");

await createConversation("jeanluc64", "monique68", "J‚Äôai vu qu‚Äôon aime tous les deux la randonn√©e !");
await createConversation("monique68", "jeanluc64", "C‚Äôest vrai ! J‚Äôadore les balades en for√™t. Tu fais souvent des randos ?");
await createConversation("jeanluc64", "monique68", "Oui, presque tous les week-ends. On pourrait faire une sortie ensemble un de ces jours.");
await createConversation("monique68", "jeanluc64", "Avec plaisir ! √áa pourrait √™tre sympa de d√©couvrir de nouveaux sentiers ensemble.");

await createConversation("georges71", "bernadette66", "La musique classique, c‚Äôest aussi ta passion ?");
await createConversation("bernadette66", "georges71", "Oui, j‚Äôadore ! En particulier les symphonies de Beethoven. Et toi ?");
await createConversation("georges71", "bernadette66", "Je suis plus un fan de Chopin, mais Beethoven est un g√©nie aussi. Tu vas √† des concerts ?");
await createConversation("bernadette66", "georges71", "Oui, parfois. √áa te dirait d‚Äôaller √† un concert ensemble ?");

await createConversation("alain69", "pierrette59", "Bonsoir Pierrette, ravie de discuter avec toi üòä");
await createConversation("pierrette59", "alain69", "Bonsoir Alain, c‚Äôest un plaisir aussi ! Tu aimes quoi dans la vie ?");
await createConversation("alain69", "pierrette59", "J‚Äôadore la bonne cuisine et les films d‚Äôantan. Et toi ?");
await createConversation("pierrette59", "alain69", "La lecture et les promenades en bord de mer. Peut-√™tre qu‚Äôon pourrait se retrouver pour discuter autour d‚Äôun caf√© ?");
await createConversation("alain69", "pierrette59", "√áa me semble une excellente id√©e !");

await createConversation("jeanluc64", "bernadette66", "Salut Bernadette, comment va ta semaine ?");
await createConversation("bernadette66", "jeanluc64", "Salut Jean-Luc, elle se passe bien ! J‚Äôai commenc√© un nouveau livre, c‚Äôest passionnant.");
await createConversation("jeanluc64", "bernadette66", "Ah, quel genre de livre ? Moi je suis plut√¥t cin√©ma !");
await createConversation("bernadette66", "jeanluc64", "C‚Äôest un roman historique. Tu devrais essayer, c‚Äôest fascinant !");
await createConversation("jeanluc64", "bernadette66", "Je vais y penser ! Merci pour le conseil üòä");

await createConversation("pierrette59", "georges71", "Bonjour Georges, j‚Äôai vu que tu aimes la musique classique, quel est ton compositeur pr√©f√©r√© ?");
await createConversation("georges71", "pierrette59", "Salut Pierrette ! Beethoven, sans h√©siter. Et toi ?");
await createConversation("pierrette59", "georges71", "J‚Äôaime beaucoup Chopin, il a une telle sensibilit√© dans ses ≈ìuvres.");
await createConversation("georges71", "pierrette59", "Je comprends, Chopin est un po√®te. Tu joues d‚Äôun instrument ?");
await createConversation("pierrette59", "georges71", "Oui, je joue du piano, mais j‚Äôaime aussi √©couter les autres jouer.");


console.log("‚úÖ Conversations cr√©√©es entre utilisateurs");

process.exit();